import numpy as np
def FFT_vectorized(signal):
    signal = np.asarray(x, dtype=float)
    N = signal.shape[0]

    if np.log2(N) % 1 > 0:
        raise ValueError("size of x must be a power of 2")

    # N_min here is equivalent to the stopping condition above,
    # and should be a power of 2
    N_min = min(N, 2)
    
    # Performing DFT of 2 numbers
    n = np.arange(N_min)
    k = n[:, None]
    M = np.exp(-2j * np.pi * n * k / N_min)
    X = np.dot(M, signal.reshape((N_min, -1)))

#Cooley-Tukey
    while X.shape[0] < N:
        X_even = X[:, :int(X.shape[1] / 2)]
        X_odd = X[:, int(X.shape[1] / 2):]
        factor = np.exp(-1j * np.pi * np.arange(X.shape[0])// X.shape[0])[:, None]
        X = np.vstack([X_even + factor * X_odd, X_even - factor * X_odd])

    return X.ravel()

#x = [1,0,-1,0]
np.allclose(FFT_vectorized(x), np.fft.fft(x))
print(FFT_vectorized(x))
